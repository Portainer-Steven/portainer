name: ci

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - "*"
  #     - "*/*"
  #     - "!master"
  # pull_request:
  #   branches:
  #     - "*"

env:
  DOCKER_HUB_REPO: ssbkang/portainer
  CONTINAER_IMAGE_TAG: pr${{ github.event.pull_request.labels.name }}
  NODE_ENV: testing

jobs:
  build_images:
    strategy:
      matrix:
        config:
          - { platform: linux, arch: amd64 }
          - { platform: linux, arch: arm64 }
          - { platform: windows, arch: amd64, version: 1809 }
          - { platform: windows, arch: amd64, version: ltsc2022 }
    runs-on: ubuntu-latest
    steps:
      - name: "[preparation] checkout the current branch"
        uses: actions/checkout@v3.5.3
      - name: "[preparation] extract the branch name"
        shell: bash
        run: |
          echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: "[preparation] set up golang 1.19.5"
        uses: actions/setup-go@v4.0.1
        with:
          go-version: "1.19.5"
          cache-dependency-path: ./api/go.sum
      - name: "[preparation] set up node.js 18.x"
        uses: actions/setup-node@v2.5.2
        with:
          node-version: "18.x"
          cache: 'yarn'
          cache-dependency-path: 'yarn.lock'
      - name: "[preparation] set up qemu"
        uses: docker/setup-qemu-action@v2
      - name: "[preparation] set up docker buildx"
        uses: docker/setup-buildx-action@v2
      - name: "[preparation] docker login"
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: "[execution] build linux & windows portainer binaries"
        run: |
          make build-all PLATFORM=${{ matrix.config.platform }} ARCH=${{ matrix.config.arch }} ENV=${NODE_ENV}
      - name: "[execution] build docker images"
        env:
          if: github.event.pull_request.labels.name == ''
          CONTAINER_IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}
        run: |
          if [ "${{ matrix.config.platform }}" == "windows" ]; then
            CONTAINER_IMAGE_TAG="${CONTAINER_IMAGE_TAG}-${{ matrix.config.platform }}${{ matrix.config.version }}-${{ matrix.config.arch }}"
            mv dist/portainer dist/portainer.exe
            docker buildx build --output=type=registry --platform ${{ matrix.config.platform }}/${{ matrix.config.arch }} --build-arg OSVERSION=${{ matrix.config.version }} -t "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}" -f build/${{ matrix.config.platform }}/Dockerfile .
          else 
            CONTAINER_IMAGE_TAG="${CONTAINER_IMAGE_TAG}-${{ matrix.config.platform }}-${{ matrix.config.arch }}"
            docker buildx build --output=type=registry --platform ${{ matrix.config.platform }}/${{ matrix.config.arch }} -t "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}" -f build/${{ matrix.config.platform }}/Dockerfile .
            docker buildx build --output=type=registry --platform ${{ matrix.config.platform }}/${{ matrix.config.arch }} -t "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-alpine" -f build/${{ matrix.config.platform }}/alpine.Dockerfile .
  test_automation:
    strategy:
      fail-fast: false
      matrix:
        orchestrator: [standalone,swarm,kubernetes]
    runs-on: ubuntu-latest
    needs: [build_images]
    steps:
      - name: "[preparation] checkout the test automation repo on a specific branch"
        uses: actions/checkout@v3.5.3
        with:
          repository: portainer/test-automation
          ssh-key: ${{ secrets.TEST_AUTOMATION_DEPLOYMENT_KEY }}
          ssh-known-hosts: true
      - name: "[preparation] set up node.js 18.x"
        uses: actions/setup-node@v2.5.2
        with:
          node-version: "18.x"
          cache: 'npm'
          cache-dependency-path: 'package.json'
      - name: "[preparation] extract the branch name"
        shell: bash
        run: |
          echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: "[execution] - boostrap ${{ matrix.orchestrator }} environment and run test automation"
        env:
          AZURE_NAME: acr
          AZURE_REGISTRY_URL: portainertest.azurecr.io
          AZURE_USERNAME: portainertest
          AZURE_PASSWORD: ${{ secrets.AZURE_REGISTRY_PASSWORD }}
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          IS_CI: true
          IS_LOCAL: true
          TEST_RESULTS_REPO: ${{ github.workspace }}
          if: github.event.pull_request.labels.name == ''
          CONTAINER_IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}
        run: |
          # Set the default smoke-tests for each orchestrator
          if [[ "${{ matrix.orchestrator }}" == "standalone" ]]; then
            CYPRESS_TAGS="@smoke+@standalone"
          elif [[ "${{ matrix.orchestrator }}" == "swarm" ]]; then
            CYPRESS_TAGS="@smoke+@swarm"
          else
            CYPRESS_TAGS="@smoke+@kube"
          fi

          if [[ "${PORTAINER_IMAGE}" == *"-ee"* ]]; then
            PORTAINER_PRODUCT_VERSION=EE
          else
            PORTAINER_PRODUCT_VERSION=CE
          fi
          
          # Update the run.env with the right details
          rm -rf run.env && cat << EOF > run.env
          PORTAINER_PRODUCT_VERSION=${PORTAINER_PRODUCT_VERSION}
          PORTAINER_IMAGE=${CONTAINER_IMAGE_TAG}-${{ matrix.config.platform }}-${{ matrix.config.arch }}
          PORTAINER_AGENT_IMAGE=portainerci/agent:develop
          ACI_APP_ID=${{ secrets.ACI_APP_ID }}
          ACI_TENANT_ID=${{ secrets.ACI_TENANT_ID }}
          ACI_AUTH_KEY=${{ secrets.ACI_AUTH_KEY }}
          IS_LOCAL=${IS_LOCAL}
          IS_CI=${IS_CI}
          TEST_RESULTS_REPO=${TEST_RESULTS_REPO}
          PORTAINER_BE_LICENSE=${{ secrets.PORTAINER_BE_LICENSE }}
          TEST_AUTOMATION_BRANCH=master
          # Leave below as is.
          ACTION_TIMEOUT=60000
          PORTAINER_PORTABLE_ENV_IMAGE=portainer/portable-env:1.0.2
          TERM=xterm
          TEST_AUTOMATION_ENABLE_VIDEOS=true
          TEST_AUTOMATION_ENABLE_SCREENSHOTS=true
          TEST_AUTOMATION_EANBLE_EMBEDDED_SCREENSHOTS=true
          EOF
            
          # Execute run.sh that spins up a local environment followed by executing Cypress tests
          ./run.sh ${{ matrix.orchestrator }} ${CYPRESS_TAGS} ${{ secrets.PORTAINER_PASSWORD }}
        working-directory: ${{ github.workspace }}/automation/local
        id: test_automation
  build_manifests:
    runs-on: ubuntu-latest
    needs: [build_images, test_automation]
    steps:
      - name: "[preparation] extract the branch name"
        shell: bash
        run: |
          echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: "[preparation] docker login"
        uses: docker/login-action@v2.2.0
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: "[execution] build and push manifests"
        env:
          if: github.event.pull_request.labels.name == ''
          CONTAINER_IMAGE_TAG: ${{ steps.extract_branch.outputs.branch }}
        run: |
          docker buildx imagetools create -t "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}" \
            "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-linux-amd64" \
            "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-linux-arm64" \
            "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-windows1809-amd64" \
            "${DOCKER_HUB_REPO}:${CONTAINER_IMAGE_TAG}-windowsltsc2022-amd64"
